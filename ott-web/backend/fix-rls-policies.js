const { createClient } = require('@supabase/supabase-js')

// Load environment variables
require('dotenv').config()

const supabaseUrl = process.env.SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing Supabase credentials in .env file')
  console.log('‚ÑπÔ∏è This script requires:')
  console.log('   - SUPABASE_URL')
  console.log('   - SUPABASE_SERVICE_ROLE_KEY (from Supabase dashboard)')
  console.log('\nüìã To get the service role key:')
  console.log('   1. Go to Supabase Dashboard')
  console.log('   2. Go to Settings > API')
  console.log('   3. Copy "service_role" key (not anon key)')
  process.exit(1)
}

// Use service role key to bypass RLS and fix policies
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

async function fixRLSPolicies() {
  console.log('üîß Fixing RLS Policies for user_controls table...\n')
  
  try {
    // Step 1: Enable RLS
    console.log('üìã Step 1: Enabling RLS on user_controls table...')
    const { error: rlsError } = await supabase.rpc('exec_sql', {
      sql: 'ALTER TABLE user_controls ENABLE ROW LEVEL SECURITY;'
    })
    
    if (rlsError) {
      console.log('‚ÑπÔ∏è RLS already enabled or error:', rlsError.message)
    } else {
      console.log('‚úÖ RLS enabled successfully')
    }
    
    // Step 2: Drop existing policies
    console.log('\nüìã Step 2: Dropping existing policies...')
    const policiesToDrop = [
      'Users can view own controls',
      'Users can update own controls', 
      'Admin can manage all controls'
    ]
    
    for (const policyName of policiesToDrop) {
      const { error: dropError } = await supabase.rpc('exec_sql', {
        sql: `DROP POLICY IF EXISTS "${policyName}" ON user_controls;`
      })
      
      if (dropError) {
        console.log(`‚ÑπÔ∏è Policy "${policyName}" not found or error:`, dropError.message)
      } else {
        console.log(`‚úÖ Dropped policy: ${policyName}`)
      }
    }
    
    // Step 3: Create new policies
    console.log('\nüìã Step 3: Creating new secure policies...')
    
    // Policy 1: Users can read their own controls
    const { error: selectPolicyError } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE POLICY "Users can view own controls" ON user_controls
        FOR SELECT USING (
          auth.jwt() ->> 'email' = email
        );
      `
    })
    
    if (selectPolicyError) {
      console.error('‚ùå Error creating SELECT policy:', selectPolicyError.message)
    } else {
      console.log('‚úÖ Created SELECT policy: Users can view own controls')
    }
    
    // Policy 2: Users can update their own controls
    const { error: updatePolicyError } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE POLICY "Users can update own controls" ON user_controls
        FOR UPDATE USING (
          auth.jwt() ->> 'email' = email
        );
      `
    })
    
    if (updatePolicyError) {
      console.error('‚ùå Error creating UPDATE policy:', updatePolicyError.message)
    } else {
      console.log('‚úÖ Created UPDATE policy: Users can update own controls')
    }
    
    // Policy 3: Users can insert their own controls
    const { error: insertPolicyError } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE POLICY "Users can insert own controls" ON user_controls
        FOR INSERT WITH CHECK (
          auth.jwt() ->> 'email' = email
        );
      `
    })
    
    if (insertPolicyError) {
      console.error('‚ùå Error creating INSERT policy:', insertPolicyError.message)
    } else {
      console.log('‚úÖ Created INSERT policy: Users can insert own controls')
    }
    
    // Policy 4: Admin service role can manage all controls
    const { error: adminPolicyError } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE POLICY "Admin can manage all controls" ON user_controls
        FOR ALL USING (
          auth.role() = 'service_role'
        );
      `
    })
    
    if (adminPolicyError) {
      console.error('‚ùå Error creating ADMIN policy:', adminPolicyError.message)
    } else {
      console.log('‚úÖ Created ADMIN policy: Admin can manage all controls')
    }
    
    // Step 4: Grant permissions
    console.log('\nüìã Step 4: Granting permissions...')
    
    const { error: grantError } = await supabase.rpc('exec_sql', {
      sql: `
        GRANT SELECT, INSERT, UPDATE ON user_controls TO authenticated;
        GRANT ALL ON user_controls TO service_role;
      `
    })
    
    if (grantError) {
      console.log('‚ÑπÔ∏è Permissions already granted or error:', grantError.message)
    } else {
      console.log('‚úÖ Permissions granted successfully')
    }
    
    // Step 5: Verify policies
    console.log('\nüìã Step 5: Verifying policies...')
    const { data: policies, error: verifyError } = await supabase.rpc('exec_sql', {
      sql: `
        SELECT 
          policyname,
          cmd,
          permissive
        FROM pg_policies 
        WHERE tablename = 'user_controls'
        ORDER BY policyname;
      `
    })
    
    if (verifyError) {
      console.error('‚ùå Error verifying policies:', verifyError.message)
    } else {
      console.log('‚úÖ Current policies on user_controls table:')
      console.log(policies)
    }
    
    console.log('\nüéØ RLS Policies Fixed Successfully!')
    console.log('‚úÖ Users can now read their own status')
    console.log('‚úÖ Login blocking will work perfectly')
    console.log('‚úÖ System is now secure and functional')
    console.log('‚úÖ No more permission denied errors')
    
  } catch (error) {
    console.error('‚ùå Error fixing RLS policies:', error)
    console.log('\nüí° Alternative: You can run the SQL manually in Supabase SQL Editor')
    console.log('üìã Copy the contents of fix-rls-policies.sql and run it')
  }
}

// Run the fix
fixRLSPolicies().catch(console.error)

